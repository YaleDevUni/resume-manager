// migration.js
const connectDB = require('../config/db');
const Skill = require('../models/Skills');
const mongoose = require('mongoose');
const skills = [
  // Programming Languages
  'javascript',
  'python',
  'java',
  'c++',
  'c#',
  'ruby',
  'php',
  'swift',
  'kotlin',
  'typescript',
  'go',
  'rust',
  'scala',
  'perl',
  'r',
  'dart',
  'haskell',
  'elixir',
  'clojure',
  'lua',
  'objective-c',
  'matlab',
  'groovy',
  'f#',
  'erlang',
  'shell',
  'sql',
  'html',
  'css',
  'vbnet',
  'assembly',
  'cobol',
  'fortran',
  'pascal',
  'prolog',
  'vhdl',
  'verilog',
  'ada',
  'plsql',

  // Web Frameworks and Libraries
  'react',
  'angular',
  'vuejs',
  'django',
  'flask',
  'springboot',
  'express',
  'rubyonrails',
  'laravel',
  'aspnet',
  'svelte',
  'nextjs',
  'nuxtjs',
  'backbonejs',
  'emberjs',
  'meteor',
  'symfony',
  'codeigniter',
  'yii',
  'zendframework',
  'cakephp',
  'nestjs',
  'fastapi',
  'pyramid',
  'bottle',
  'koa',
  'strapi',
  'graphql',
  'netcore',
  'phoenix',
  'micronaut',
  'quarkus',
  'playframework',
  'grails',
  'mojolicious',
  'hanami',
  'turbogears',
  'catalyst',
  'jhipster',
  'lumen',

  // Software Engineering Skills
  'git',
  'docker',
  'kubernetes',
  'jenkins',
  'ci/cd',
  'agile',
  'scrum',
  'kanban',
  'tdd',
  'bdd',
  'unit-testing',
  'integration-testing',
  'system-testing',
  'performance-testing',
  'version-control',
  'continuous-integration',
  'continuous-deployment',
  'microservices',
  'rest',
  'graphql',
  'soap',
  'json',
  'xml',
  'apis',
  'cloud-computing',
  'aws',
  'azure',
  'gcp',
  'terraform',
  'ansible',
  'chef',
  'puppet',
  'networking',
  'security',
  'encryption',
  'devops',
  'sre',
  'monitoring',
  'logging',
  'troubleshooting',
  'scalability',
  'architecture',
  'design-patterns',
  'database-design',
  'sql-optimization',
  'nosql',
  'mongodb',
  'redis',
  'cassandra',
  'elasticsearch',
  'postgresql',
  'mysql',
  'sqlite',
  'oracle',

  // Emerging Technologies and Specialized Areas
  'big-data',
  'hadoop',
  'spark',
  'machine-learning',
  'data-science',
  'data-visualization',
  'artificial-intelligence',
  'blockchain',
  'iot',
  'robotics',
  'game-development',
  'mobile-development',
  'ui/ux',
  'accessibility',
  'responsive-design',
  'performance-optimization',
  'caching',
  'load-balancing',
  'virtualization',
  'containerization',
  'edge-computing',
  'quantum-computing',
  'biometrics',
  'cryptography',
  'cloud-native',
  'serverless',
  'event-driven-architecture',
  'functional-programming',
  'low-code',
  'no-code',
  'distributed-systems',
  'service-mesh',
  'site-reliability-engineering',
  'chaos-engineering',
  'zero-trust-security',
  'observability',
  'resilience-engineering',
  'continuous-testing',
  'software-ethics',
  'technical-debt',
  'digital-transformation',
  'api-management',
  'data-governance',
  'data-privacy',
  'fintech',
  'medtech',
  'edtech',
  'insurtech',
  'regtech',
  'legaltech',
  'govtech',
  'proptech',
  'agtech',
  'martech',
  'cleantech',
  'green-it',
  'sustainable-technology',
  'carbon-footprint',
  'smart-cities',
  'autonomous-vehicles',
  'space-technology',
  'nodejs',
];

const migrateSkills = async () => {
  await connectDB();
  let totalSkills = 0;
  try {
    const skillPromises = skills.map(skill => {
      totalSkills++;
      return new Skill({ skill }).save();
    });
    //  skip errored promises
    const results = await Promise.allSettled(skillPromises);
    // log success/totals
    const successResults = results.filter(
      result => result.status === 'fulfilled'
    );
    console.log(
      `Successfully inserted ${successResults.length} out of ${totalSkills} skills`
    );
  } catch (err) {
    console.error('Error inserting skills:', err);
  } finally {
    mongoose.connection.close();
  }
};

migrateSkills();
